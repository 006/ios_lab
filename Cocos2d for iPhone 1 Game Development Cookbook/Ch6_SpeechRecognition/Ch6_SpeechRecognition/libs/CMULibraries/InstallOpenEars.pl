#!/usr/bin/perl -w

##  OpenEars version 0.9.02
##  http://www.politepix.com/openears
##
##  InstallOpenEars.pl
##  OpenEars
##
##  Created by Halle Winkler on 8/30/10.
##  Copyright Halle Winkler 2010. All rights reserved.
##  http://www.politepix.com
##  Contact at http://www.politepix.com/contact
##
##  This file is licensed under the Common Development and Distribution License (CDDL) Version 1.0
##  http://www.opensource.org/licenses/cddl1.txt or see included file license.txt
##  with the single exception to the license that you may distribute executable-only versions
##  of software using OpenEars files without making source code available under the terms of CDDL Version 1.0 
##  paragraph 3.1 if source code to your software isn't otherwise available, and without including a notice in 
##  that case that that source code is available.

## 1. Generate the iPhone-appropriate config.h file that would normally be generated by ./configure.

$configh = <<"CONFIGHCONTENTS";
/* include/config.h.  Generated from config.h.in by configure.  */
/* include/config.h.in.  Generated from configure.in by autoheader.  */

/* Use ALSA library for sound I/O */
/* #undef AD_BACKEND_ALSA */

/* No interface for sound I/O */
#define AD_BACKEND_NONE 

/* Use OSS for sound I/O */
/* #undef AD_BACKEND_OSS */

/* Use OSS for sound I/O */
/* #undef AD_BACKEND_OSS */

/* Use OSS interface for sound I/O */
/* #undef AD_BACKEND_OSS_BSD */

/* Use SunOS interface for sound I/O */
/* #undef AD_BACKEND_SUNOS */

/* Use WinMM interface for sound I/O */
/* #undef AD_BACKEND_WIN32 */

/* Default radix point for fixed-point */
/* #undef DEFAULT_RADIX */

/* Enable thread safety */
#define ENABLE_THREADS 

/* Use Q15 fixed-point computation */
/* #undef FIXED16 */

/* Use fixed-point computation */
#define FIXED_POINT 1

/* Define to 1 if you have the <dlfcn.h> header file. */
#define HAVE_DLFCN_H 1

/* Define if you have the iconv() function. */
#define HAVE_ICONV 1

/* Define to 1 if you have the <inttypes.h> header file. */
#define HAVE_INTTYPES_H 1

/* Define to 1 if you have the `asound' library (-lasound). */
/* #undef HAVE_LIBASOUND */

/* Define to 1 if you have the `blas' library (-lblas). */
/* #undef HAVE_LIBBLAS */

/* Define to 1 if you have the `lapack' library (-llapack). */
/* #undef HAVE_LIBLAPACK */

/* Define to 1 if you have the `m' library (-lm). */
#define HAVE_LIBM 1

/* Define to 1 if you have the `pthread' library (-lpthread). */
#define HAVE_LIBPTHREAD 1

/* Define to 1 if the system has the type `long long'. */
#define HAVE_LONG_LONG 1

/* Define to 1 if you have the <memory.h> header file. */
#define HAVE_MEMORY_H 1

/* Define to 1 if you have the `perror' function. */
#define HAVE_PERROR 1

/* Define to 1 if you have the `popen' function. */
#define HAVE_POPEN 1

/* Define to 1 if you have the <pthread.h> header file. */
#define HAVE_PTHREAD_H 1

/* Define to 1 if you have the `snprintf' function. */
#define HAVE_SNPRINTF 1

/* Define to 1 if you have the <stdint.h> header file. */
#define HAVE_STDINT_H 1

/* Define to 1 if you have the <stdlib.h> header file. */
#define HAVE_STDLIB_H 1

/* Define to 1 if you have the <strings.h> header file. */
#define HAVE_STRINGS_H 1

/* Define to 1 if you have the <string.h> header file. */
#define HAVE_STRING_H 1

/* Define to 1 if you have the <sys/stat.h> header file. */
#define HAVE_SYS_STAT_H 1

/* Define to 1 if you have the <sys/types.h> header file. */
#define HAVE_SYS_TYPES_H 1

/* Define to 1 if you have the <unistd.h> header file. */
#define HAVE_UNISTD_H 1

/* Define as const if the declaration of iconv() needs const. */
#define ICONV_CONST 

/* Define to the sub-directory in which libtool stores uninstalled libraries.
   */
#define LT_OBJDIR ".libs/"

/* Define to the address where bug reports for this package should be sent. */
#define PACKAGE_BUGREPORT ""

/* Define to the full name of this package. */
#define PACKAGE_NAME "sphinxbase"

/* Define to the full name and version of this package. */
#define PACKAGE_STRING "sphinxbase 0.6.1"

/* Define to the one symbol short name of this package. */
#define PACKAGE_TARNAME "sphinxbase"

/* Define to the version of this package. */
#define PACKAGE_VERSION "0.6.1"

/* Define as the return type of signal handlers (`int' or `void'). */
#define RETSIGTYPE void

/* The size of `long', as computed by sizeof. */
#define SIZEOF_LONG 8

/* The size of `long long', as computed by sizeof. */
#define SIZEOF_LONG_LONG 8

/* Enable debugging output */
/* #undef SPHINX_DEBUG */

/* Define to 1 if you have the ANSI C header files. */
#define STDC_HEADERS 1

/* Enable matrix algebra with LAPACK */
#define WITH_LAPACK 

/* Define to 1 if your processor stores words with the most significant byte
   first (like Motorola and SPARC, unlike Intel and VAX). */
/* #undef WORDS_BIGENDIAN */

CONFIGHCONTENTS
;

open(CONFIGHHANDLE,">sphinxbase-0.6.1/include/config.h")or die "can't open config.h:$!";
print CONFIGHHANDLE $configh;
close(CONFIGHHANDLE);









$voiceconfigh = <<"VOICECONFIGHCONTENTS";
// Uncomment just one of the following voices:
#define cmu_us_awb8k // Uncomment this in order to use the (faster) 8k version of the us_awb voice // works
//#define cmu_us_rms8k // Uncomment this in order to use the (faster) 8k version of the us_rms voice
//#define cmu_us_slt8k // Uncomment this in order to use the (faster) 8k version of the us_slt voice
//#define cmu_time_awb // Uncomment this in order to use the 16k awb time voice
//#define cmu_us_awb //  Uncomment this in order to use the 16k us_awb voice
//#define cmu_us_kal //  Uncomment this in order to use the 8k us_kal voice
//#define cmu_us_kal16 // Uncomment this in order to use the 16k us_kal voice
//#define cmu_us_rms // Uncomment this in order to use the 16k us_rms voice
//#define cmu_us_slt // Uncomment this in order to use the 16k us_slt voice
VOICECONFIGHCONTENTS
;

open(VOICECONFIGHHANDLE,">flite-1.4-release/include/OpenEarsVoiceConfig.h")or die "can't open OpenEarsVoiceConfig.h:$!";
print VOICECONFIGHHANDLE $voiceconfigh;
close(VOICECONFIGHHANDLE);













## 2. Edit sphinx_config.h for fixed-point and no audio device

my $sphinxconfigfilename = 'sphinxbase-0.6.1/include/sphinx_config.h';
my $find1 = '#define AD_BACKEND_ALSA';
my $replace1 = '/* #undef AD_BACKEND_ALSA */';
my $find2 = '\/\* #undef AD_BACKEND_NONE \*\/';
my $replace2 = '#define AD_BACKEND_NONE';
my $find3 = '\/\* #undef FIXED_POINT \*\/';
my $replace3 = '#define FIXED_POINT 1';
my $find4 = '#define SIZEOF_LONG 4';
my $replace4 = '#define SIZEOF_LONG 8';

local @ARGV = ($sphinxconfigfilename);
local $^I = '.bak';
while( <> ){
	s/$find1/$replace1/ig;
	s/$find2/$replace2/ig;
	s/$find3/$replace3/ig;
	s/$find4/$replace4/ig;
	print;       
};

my $tied_mgau_commonfilename = 'pocketsphinx-0.6.1/src/libpocketsphinx/tied_mgau_common.h';

my $findtied_mgau = '#define LOGMATH_INLINE inline';
$definereplace = <<"DEFINECONTENTS";
#define LOGMATH_INLINE static inline
DEFINECONTENTS
;

local @ARGV = ($tied_mgau_commonfilename);
local $^I = '.bak';
while( <> ){
	s/$findtied_mgau/$definereplace/ig;
	print;       
};

##Now let's fix the Flite files

my $cst_ssmlfilename = 'flite-1.4-release/src/synth/cst_ssml.c';
my $cst_ssmlfind1 = 'feat_print\(stdout,attributes\)';
my $cst_ssmlreplace1 = 'feat_print_flite(stdout,attributes)';

local @ARGV = ($cst_ssmlfilename);
local $^I = '.bak';
while( <> ){
	s/$cst_ssmlfind1/$cst_ssmlreplace1/ig;
	print;       
};

my $cst_featuresfilename = 'flite-1.4-release/src/utils/cst_features.c';
my $cst_featuresfind1 = 'int feat_print\(cst_file fd,const cst_features';
my $cst_featuresreplace1 = 'int feat_print_flite(cst_file fd,const cst_features';

local @ARGV = ($cst_featuresfilename);
local $^I = '.bak';
while( <> ){
	s/$cst_featuresfind1/$cst_featuresreplace1/ig;
	print;       
};

my $cst_featuresfilenameh = 'flite-1.4-release/include/cst_features.h';

local @ARGV = ($cst_featuresfilenameh);
local $^I = '.bak';
while( <> ){
	s/$cst_featuresfind1/$cst_featuresreplace1/ig;
	print;       
};

my $cst_mlsafilename = 'flite-1.4-release/src/cg/cst_mlsa.c';
my $speedhackdefinefind = '#ifdef UNDER_CE';
my $speedhackdefinereplace = <<"SPEEDHACKDEFINE";
#include "OpenEarsVoiceConfig.h"
#ifdef cmu_us_awb8k
#define SPEED_HACK
#endif
#ifdef cmu_us_rms8k
#define SPEED_HACK
#endif
#ifdef cmu_us_slt8k
#define SPEED_HACK
#endif

#ifdef UNDER_CE
SPEEDHACKDEFINE
;
local @ARGV = ($cst_mlsafilename);
local $^I = '.bak';
while( <> ){
	s/$speedhackdefinefind/$speedhackdefinereplace/ig;
	print;       
};

use File::Slurp;
$cmu_lex_data_raw = read_file('flite-1.4-release/lang/cmulex/cmu_lex_data_raw.c');
$cmu_lex_entries_huff_table = read_file('flite-1.4-release/lang/cmulex/cmu_lex_entries_huff_table.c');
$cmu_lex_num_bytes = read_file('flite-1.4-release/lang/cmulex/cmu_lex_num_bytes.c');

my $cmu_lex_datafilename = 'flite-1.4-release/lang/cmulex/cmu_lex_data.c';
my $cmu_lex_datafind1 = '#include \"cmu_lex_data_raw.c\"';

local @ARGV = ($cmu_lex_datafilename);
local $^I = '.bak';
while( <> ){
	s/$cmu_lex_datafind1/$cmu_lex_data_raw/ig;
	print;       
};

my $cmu_lex_entries1filename = 'flite-1.4-release/lang/cmulex/cmu_lex_entries.c';
my $cmu_lex_entries1find1 = '#include \"cmu_lex_entries_huff_table.c\"';

local @ARGV = ($cmu_lex_entries1filename);
local $^I = '.bak';
while( <> ){
	s/$cmu_lex_entries1find1/$cmu_lex_entries_huff_table/ig;
	print;       
};

my $cmu_lex_entries2filename = 'flite-1.4-release/lang/cmulex/cmu_lex_entries.c';
my $cmu_lex_entries2find1 = '#include \"cmu_lex_num_bytes.c\"';

local @ARGV = ($cmu_lex_entries2filename);
local $^I = '.bak';
while( <> ){
	s/$cmu_lex_entries2find1/$cmu_lex_num_bytes/ig;
	print;       
};



my $ms_gaudenfilename = 'pocketsphinx-0.6.1/src/libpocketsphinx/ms_gauden.c';
my $ms_gaudenfind1 = 'for \(i = 0\; i \< n_feat\; i\+\+\)';
my $ms_gaudenreplace1 = 'for (i = 0; i < n_feat; i++) {';
my $ms_gaudenfind2 = 'printf\(\" \%dx\%d\", n_density, veclen\[i\]\)\;';
my $ms_gaudenreplace2 = <<"GAUDENTOKEN";
// printf(" %dx%d", n_density, veclen[i]);
}
GAUDENTOKEN
;

local @ARGV = ($ms_gaudenfilename);
local $^I = '.bak';
while( <> ){
	s/$ms_gaudenfind1/$ms_gaudenreplace1/ig;
	s/$ms_gaudenfind2/$ms_gaudenreplace2/ig;
	print;       
};


##$filename = "/tmp/" . $name . ".tmp"; 

my $pathtovoice1 = "wince/voices/src/cmu_us_awb8k/";
my $pathtovoice2 = "wince/voices/src/cmu_us_rms8k/";
my $pathtovoice3 = "wince/voices/src/cmu_us_slt8k/";

my $oldname1forvoice1 = "cmu_us_awb_cg_durmodel.c";
my $oldname2forvoice1 = "cmu_us_awb_cg_durmodel.h";
my $oldname3forvoice1 = "cmu_us_awb_cg_f0_trees.c";
my $oldname4forvoice1 = "cmu_us_awb_cg_f0_trees.h";
my $oldname5forvoice1 = "cmu_us_awb_cg_phonestate.c";
my $oldname6forvoice1 = "cmu_us_awb_cg_single_mcep_trees.c";
my $oldname7forvoice1 = "cmu_us_awb_cg_single_mcep_trees.h";
my $oldname8forvoice1 = "cmu_us_awb_cg_single_params.c";
my $oldname9forvoice1 = "cmu_us_awb_cg.c";
my $oldname10forvoice1 = "cmu_us_awb.c";

my $newname1forvoice1 = "cmu_us_awb8k_cg_durmodel.c";
my $newname2forvoice1 = "cmu_us_awb8k_cg_durmodel.h";
my $newname3forvoice1 = "cmu_us_awb8k_cg_f0_trees.c";
my $newname4forvoice1 = "cmu_us_awb8k_cg_f0_trees.h";
my $newname5forvoice1 = "cmu_us_awb8k_cg_phonestate.c";
my $newname6forvoice1 = "cmu_us_awb8k_cg_single_mcep_trees.c";
my $newname7forvoice1 = "cmu_us_awb8k_cg_single_mcep_trees.h";
my $newname8forvoice1 = "cmu_us_awb8k_cg_single_params.c";
my $newname9forvoice1 = "cmu_us_awb8k_cg.c";
my $newname10forvoice1 = "cmu_us_awb8k.c";

my $oldname1forvoice2 = "cmu_us_rms_cg_durmodel.c";
my $oldname2forvoice2 = "cmu_us_rms_cg_durmodel.h";
my $oldname3forvoice2 = "cmu_us_rms_cg_f0_trees.c";
my $oldname4forvoice2 = "cmu_us_rms_cg_f0_trees.h";
my $oldname5forvoice2 = "cmu_us_rms_cg_phonestate.c";
my $oldname6forvoice2 = "cmu_us_rms_cg_single_mcep_trees.c";
my $oldname7forvoice2 = "cmu_us_rms_cg_single_mcep_trees.h";
my $oldname8forvoice2 = "cmu_us_rms_cg_single_params.c";
my $oldname9forvoice2 = "cmu_us_rms_cg.c";
my $oldname10forvoice2 = "cmu_us_rms.c";

my $newname1forvoice2 = "cmu_us_rms8k_cg_durmodel.c";
my $newname2forvoice2 = "cmu_us_rms8k_cg_durmodel.h";
my $newname3forvoice2 = "cmu_us_rms8k_cg_f0_trees.c";
my $newname4forvoice2 = "cmu_us_rms8k_cg_f0_trees.h";
my $newname5forvoice2 = "cmu_us_rms8k_cg_phonestate.c";
my $newname6forvoice2 = "cmu_us_rms8k_cg_single_mcep_trees.c";
my $newname7forvoice2 = "cmu_us_rms8k_cg_single_mcep_trees.h";
my $newname8forvoice2 = "cmu_us_rms8k_cg_single_params.c";
my $newname9forvoice2 = "cmu_us_rms8k_cg.c";
my $newname10forvoice2 = "cmu_us_rms8k.c";

my $oldname1forvoice3 = "cmu_us_slt_cg_durmodel.c";
my $oldname2forvoice3 = "cmu_us_slt_cg_durmodel.h";
my $oldname3forvoice3 = "cmu_us_slt_cg_f0_trees.c";
my $oldname4forvoice3 = "cmu_us_slt_cg_f0_trees.h";
my $oldname5forvoice3 = "cmu_us_slt_cg_phonestate.c";
my $oldname6forvoice3 = "cmu_us_slt_cg_single_mcep_trees.c";
my $oldname7forvoice3 = "cmu_us_slt_cg_single_mcep_trees.h";
my $oldname8forvoice3 = "cmu_us_slt_cg_single_params.c";
my $oldname9forvoice3 = "cmu_us_slt_cg.c";
my $oldname10forvoice3 = "cmu_us_slt.c";

my $newname1forvoice3 = "cmu_us_slt8k_cg_durmodel.c";
my $newname2forvoice3 = "cmu_us_slt8k_cg_durmodel.h";
my $newname3forvoice3 = "cmu_us_slt8k_cg_f0_trees.c";
my $newname4forvoice3 = "cmu_us_slt8k_cg_f0_trees.h";
my $newname5forvoice3 = "cmu_us_slt8k_cg_phonestate.c";
my $newname6forvoice3 = "cmu_us_slt8k_cg_single_mcep_trees.c";
my $newname7forvoice3 = "cmu_us_slt8k_cg_single_mcep_trees.h";
my $newname8forvoice3 = "cmu_us_slt8k_cg_single_params.c";
my $newname9forvoice3 = "cmu_us_slt8k_cg.c";
my $newname10forvoice3 = "cmu_us_slt8k.c";

rename($pathtovoice1 . $oldname1forvoice1, $pathtovoice1 . $newname1forvoice1) || print "Don't have permission to rename" . $oldname1forvoice1;

rename($pathtovoice1 . $oldname2forvoice1, $pathtovoice1 . $newname2forvoice1) || print "Don't have permission to rename" . $oldname2forvoice1;

rename($pathtovoice1 . $oldname3forvoice1, $pathtovoice1 . $newname3forvoice1) || print "Don't have permission to rename" . $oldname3forvoice1;

rename($pathtovoice1 . $oldname4forvoice1, $pathtovoice1 . $newname4forvoice1) || print "Don't have permission to rename" . $oldname4forvoice1;

rename($pathtovoice1 . $oldname5forvoice1, $pathtovoice1 . $newname5forvoice1) || print "Don't have permission to rename" . $oldname5forvoice1;

rename($pathtovoice1 . $oldname6forvoice1, $pathtovoice1 . $newname6forvoice1) || print "Don't have permission to rename" . $oldname6forvoice1;

rename($pathtovoice1 . $oldname7forvoice1, $pathtovoice1 . $newname7forvoice1) || print "Don't have permission to rename" . $oldname7forvoice1;

rename($pathtovoice1 . $oldname8forvoice1, $pathtovoice1 . $newname8forvoice1) || print "Don't have permission to rename" . $oldname8forvoice1;

rename($pathtovoice1 . $oldname9forvoice1, $pathtovoice1 . $newname9forvoice1) || print "Don't have permission to rename" . $oldname9forvoice1;

rename($pathtovoice1 . $oldname10forvoice1, $pathtovoice1 . $newname10forvoice1) || print "Don't have permission to rename" . $oldname10forvoice1;




rename($pathtovoice2 . $oldname1forvoice2, $pathtovoice2 . $newname1forvoice2) || print "Don't have permission to rename" . $oldname1forvoice2;

rename($pathtovoice2 . $oldname2forvoice2, $pathtovoice2 . $newname2forvoice2) || print "Don't have permission to rename" . $oldname2forvoice2;

rename($pathtovoice2 . $oldname3forvoice2, $pathtovoice2 . $newname3forvoice2) || print "Don't have permission to rename" . $oldname3forvoice2;

rename($pathtovoice2 . $oldname4forvoice2, $pathtovoice2 . $newname4forvoice2) || print "Don't have permission to rename" . $oldname4forvoice2;

rename($pathtovoice2 . $oldname5forvoice2, $pathtovoice2 . $newname5forvoice2) || print "Don't have permission to rename" . $oldname5forvoice2;

rename($pathtovoice2 . $oldname6forvoice2, $pathtovoice2 . $newname6forvoice2) || print "Don't have permission to rename" . $oldname6forvoice2;

rename($pathtovoice2 . $oldname7forvoice2, $pathtovoice2 . $newname7forvoice2) || print "Don't have permission to rename" . $oldname7forvoice2;

rename($pathtovoice2 . $oldname8forvoice2, $pathtovoice2 . $newname8forvoice2) || print "Don't have permission to rename" . $oldname8forvoice2;

rename($pathtovoice2 . $oldname9forvoice2, $pathtovoice2 . $newname9forvoice2) || print "Don't have permission to rename" . $oldname9forvoice2;

rename($pathtovoice2 . $oldname10forvoice2, $pathtovoice2 . $newname10forvoice2) || print "Don't have permission to rename" . $oldname10forvoice2;




rename($pathtovoice3 . $oldname1forvoice3, $pathtovoice3 . $newname1forvoice3) || print "Don't have permission to rename" . $oldname1forvoice3;

rename($pathtovoice3 . $oldname2forvoice3, $pathtovoice3 . $newname2forvoice3) || print "Don't have permission to rename" . $oldname2forvoice3;

rename($pathtovoice3 . $oldname3forvoice3, $pathtovoice3 . $newname3forvoice3) || print "Don't have permission to rename" . $oldname3forvoice3;

rename($pathtovoice3 . $oldname4forvoice3, $pathtovoice3 . $newname4forvoice3) || print "Don't have permission to rename" . $oldname4forvoice3;

rename($pathtovoice3 . $oldname5forvoice3, $pathtovoice3 . $newname5forvoice3) || print "Don't have permission to rename" . $oldname5forvoice3;

rename($pathtovoice3 . $oldname6forvoice3, $pathtovoice3 . $newname6forvoice3) || print "Don't have permission to rename" . $oldname6forvoice3;

rename($pathtovoice3 . $oldname7forvoice3, $pathtovoice3 . $newname7forvoice3) || print "Don't have permission to rename" . $oldname7forvoice3;

rename($pathtovoice3 . $oldname8forvoice3, $pathtovoice3 . $newname8forvoice3) || print "Don't have permission to rename" . $oldname8forvoice3;

rename($pathtovoice3 . $oldname9forvoice3, $pathtovoice3 . $newname9forvoice3) || print "Don't have permission to rename" . $oldname9forvoice3;

rename($pathtovoice3 . $oldname10forvoice3, $pathtovoice3 . $newname10forvoice3) || print "Don't have permission to rename" . $oldname10forvoice3;


local @ARGV = ($pathtovoice1 . $newname1forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};

local @ARGV = ($pathtovoice1 . $newname2forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};

local @ARGV = ($pathtovoice1 . $newname3forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};

local @ARGV = ($pathtovoice1 . $newname4forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};

local @ARGV = ($pathtovoice1 . $newname5forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};

local @ARGV = ($pathtovoice1 . $newname6forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};

local @ARGV = ($pathtovoice1 . $newname7forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};

local @ARGV = ($pathtovoice1 . $newname8forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};

local @ARGV = ($pathtovoice1 . $newname9forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};

local @ARGV = ($pathtovoice1 . $newname10forvoice1);
local $^I = '.bak';
while( <> ){
	s/awb/awb8k/ig;
	print;       
};










local @ARGV = ($pathtovoice2 . $newname1forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};

local @ARGV = ($pathtovoice2 . $newname2forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};

local @ARGV = ($pathtovoice2 . $newname3forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};

local @ARGV = ($pathtovoice2 . $newname4forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};

local @ARGV = ($pathtovoice2 . $newname5forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};

local @ARGV = ($pathtovoice2 . $newname6forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};

local @ARGV = ($pathtovoice2 . $newname7forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};

local @ARGV = ($pathtovoice2 . $newname8forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};

local @ARGV = ($pathtovoice2 . $newname9forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};

local @ARGV = ($pathtovoice2 . $newname10forvoice2);
local $^I = '.bak';
while( <> ){
	s/rms/rms8k/ig;
	print;       
};






local @ARGV = ($pathtovoice3 . $newname1forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};

local @ARGV = ($pathtovoice3 . $newname2forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};

local @ARGV = ($pathtovoice3 . $newname3forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};

local @ARGV = ($pathtovoice3 . $newname4forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};

local @ARGV = ($pathtovoice3 . $newname5forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};

local @ARGV = ($pathtovoice3 . $newname6forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};

local @ARGV = ($pathtovoice3 . $newname7forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};

local @ARGV = ($pathtovoice3 . $newname8forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};

local @ARGV = ($pathtovoice3 . $newname9forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};

local @ARGV = ($pathtovoice3 . $newname10forvoice3);
local $^I = '.bak';
while( <> ){
	s/slt/slt8k/ig;
	print;       
};









